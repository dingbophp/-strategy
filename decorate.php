<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2019/6/17
 * Time: 19:30
 */
//装饰模式
abstract class Decoration{
    abstract function show();
}

//装饰对象
class decorateObiject extends decoration {

    public  $name = '';
    public function __construct($name)
    {
        $this->name = $name;
    }

    public function show()
    {
        // TODO: Implement show() method.
        echo '    LAST OBJ'.$this->name ;
    }
}

//装饰基类
abstract class Decorator extends Decoration{
    protected $component = null;
    public function setComponent(Decoration $decoration)
    {
        $this->component  = $decoration;
    }

    public function show(){
        if($this->component != null){
            $this->component->show();
        }
    }
}

//装饰子类
class DecoratorA extends Decorator{

    public function show()
    {
        echo '  class A ';
        parent::show(); // TODO: Change the autogenerated stub

    }
}

//装饰子类
class DecoratorB extends Decorator{

    public function show()
    {
        echo '  class B  ';
        parent::show(); // TODO: Change the autogenerated stub

    }
}

header('Content-Type:text/html;charset=utf-8');

//实现过程
$obj =  new decorateObiject('laoding');
$A = new DecoratorA();
$B = new DecoratorB();


$A->setComponent($obj);

$B->setComponent($A);

$B->show();

//结果 先执行B 的装饰部分  然后装饰A  最后执行积累的显示对象